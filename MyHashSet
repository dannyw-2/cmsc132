import java.util.ArrayList;
import java.util.Iterator;



/** 
 * The MyHashSet API is similar to the Java Set interface. This
 * collection is backed by a hash table.
 */
public class MyHashSet<E> implements Iterable<E> {

	/** Unless otherwise specified, the table will start as
	 * an array (ArrayList) of this size.*/
	private final static int DEFAULT_INITIAL_CAPACITY = 4;

	/** When the ratio of size/capacity exceeds this
	 * value, the table will be expanded. */
	private final static double MAX_LOAD_FACTOR = 0.75;

	/* STUDENTS: LEAVE THIS AS PUBLIC */
	public ArrayList<Node<E>> hashTable;

	private int size;  // number of elements in the table

	
	// STUDENTS: DO NOT ADD ANY OTHER INSTANCE VARIABLES OR STATIC
	// VARIABLES TO THIS CLASS!
	
	
	/* STUDENTS: LEAVE THIS PUBLIC, and do not modify the Node class. */
	public static class Node<T> {
		private T data;
		public Node<T> next;  // STUDENTS: Leave this public, too!

		private Node(T data) {
			this.data = data;
			next = null;
		}
	}

	/**
	 * Initializes an empty table with the specified capacity.  
	 *
	 * @param initialCapacity initial capacity (length) of the 
	 * underlying table
	 */
	public MyHashSet(int initialCapacity) {
		size = initialCapacity;
		ArrayList<Node<E>> list = new ArrayList<>();
		for(int i = 0; i < initialCapacity; i++) {
			list.add(null);
		}
		hashTable = list;
	}

	/**
	 * Initializes an empty table of length equal to 
	 * DEFAULT_INITIAL_CAPACITY
	 */
	public MyHashSet() {
		ArrayList<Node<E>> list = new ArrayList<>();
		for(int i = 0; i < DEFAULT_INITIAL_CAPACITY; i++) {
			list.add(null);
		}
		hashTable = list;
		size = 0;
	}

	/**
	 * Returns the number of elements stored in the table.
	 * @return number of elements in the table
	 */
	public int size(){
		return size;
	}

	/**
	 * Returns the length of the table (the number of buckets).
	 * @return length of the table (capacity)
	 */
	public int getCapacity(){
		return hashTable.size();
	}

	/** 
	 * Looks for the specified element in the table.
	 * 
	 * @param element to be found
	 * @return true if the element is in the table, false otherwise
	 */
	public boolean contains(Object element) {
		int hashNum = Math.abs(element.hashCode() % getCapacity());
		if(hashTable.get(hashNum) == null) {
			return false;
		}
		Node<E> curr = hashTable.get(hashNum);
		while(curr != null){
			if(curr.data.equals(element)) {
				return true;
			}
			curr = curr.next;
		}
		return false;
	}

	/** Adds the specified element to the collection, if it is not
	 * already present.  If the element is already in the collection, 
	 * then this method does nothing.
	 * 
	 * @param element the element to be added to the collection
	 */
	public void add(E element) {
		if(contains(element)) {
			return;
		}
		int hashNum = Math.abs(element.hashCode() % getCapacity());
		Node<E> n = new Node<E>(element);
		Node<E> curr = hashTable.get(hashNum);
		Node<E> prev = null;
		if(curr == null) {
			hashTable.set(hashNum, n);
		} else {
			while(curr != null){
				prev = curr;
				curr = curr.next;
			}
			prev.next = n;
			n.next = null;
		}
		size++;
		if(Double.valueOf(size)/
				Double.valueOf(hashTable.size()) > MAX_LOAD_FACTOR) {
			ArrayList<Node<E>> list = new ArrayList<>();
			for(int i = 0; i < hashTable.size()*2; i++){
				list.add(null);
			}
			for(int i = 0; i < hashTable.size(); i++) {
				if(hashTable.get(i) != null) {
					Node<E> curr1 = hashTable.get(i);
					while(curr1 != null) {
						this.addHelper(curr1.data,list);
						curr1 = curr1.next;
					}
				}
			}
			hashTable = list;
		}
		
	}
	
	/*This method assists my add method in rehasing the elements of the hash 
	 * set after doubling the size of the hash table*/
	private void addHelper(E element, ArrayList<Node<E>> list) {
		int hashNum = Math.abs(element.hashCode() % list.size());
		Node<E> n = new Node<E>(element);
		Node<E> curr = list.get(hashNum);
		Node<E> prev = null;
		if(curr == null) {
			list.set(hashNum, n);
		} else {
			while(curr != null){
				prev = curr;
				curr = curr.next;
			}
			prev.next = n;
			n.next = null;
		}
	}
	/** Removes the specified element from the collection.  If the
	 * element is not present then this method should do nothing.
	 *
	 * @param element the element to be removed
	 * @return true if an element was removed, false if no element 
	 * removed
	 */
	public boolean remove(Object element) {
		if(!contains(element)) {
			return false;
		} else {
			int hashNum = Math.abs(element.hashCode() % getCapacity());
			Node<E> curr = hashTable.get(hashNum);
			Node<E> prev = null;
			if(curr.data.equals(element)) {
				hashTable.set(hashNum, curr.next);
				size--;
				return true;
			}
			while(curr != null){
				if(curr.data.equals(element)) {
					prev.next = curr.next;
					size--;
					return true;
				}
				prev = curr;
				curr = curr.next;
			}
			return false;
		}
	}

	/** Returns an Iterator that can be used to iterate over
	 * all of the elements in the collection.
	 * 
	 * The order of the elements is unspecified.
	 */
	@Override
	public Iterator<E> iterator() {
		return new HashSetIterator();
	}
	private class HashSetIterator implements Iterator<E>{
		private Node<E> curr = hashTable.get(0);
		@Override
		public boolean hasNext() {
			if(size == 0) {
				return false;
			} else if(curr.next != null) {
				return true;
			} else {
				Node<E> last = null;
				for(int i = 0; i < hashTable.size(); i++) {
					if(hashTable.get(i) == null) {
						while(last != null) {
							last = last.next;
						}
					}
				}
				if(last.equals(curr)) {
					return false;
				}
				return true;
			}
			
		}

		@Override
		public E next() {
			if(curr.next != null) {
				curr = curr.next;
				return curr.next.data;
			} else {
				int i = 1;
				Node<E> needReturn = 
						hashTable.get(curr.hashCode() % hashTable.size());
				while(hashTable.get(curr.hashCode() 
						% hashTable.size()+i) == null) {
					i++;
				}
				curr = needReturn;
				return needReturn.data;
			}
		}
		
	}

}
